#!/usr/bin/env rc
flag e +
~ $DEBUG ?* && flag x +

~ $te ?* || te=st  # terminal emulator, e.g. xterm, st, rxvt

state=''
for (arg) {
	if (~ $state ?*) {
		switch($state) {
			case -d; SJ_DIR=$arg
			case -u; SJ_USER=$arg
			case -r; SJ_RESOURCE=$arg
			case -s; SJ_SERVER=$arg
			case *; echo invalid state; exit 1
		}
		state=''
	}
	if not {
		switch($arg) {
			case -[durs]; state=$arg
			case -D;
			case *;
				printf '%s: invalid option: %s\n' `{basename $0} $arg;
				exit 1;
		}
	}
}

~ $SJ_DIR ?* || { echo SJ_DIR is not defined; exit 1; }
cd $SJ_DIR || { echo cannot cd to "$SJ_DIR"; exit 1; }

jid=$SJ_USER@$SJ_SERVER
true $jid  #this shows variable when DEBUG is set

bg_jobs=()
$te -T 'connect - '$jid -e sjfs-connect $* &
bg_jobs=($bg_jobs $apid)
echo After you enter your password in the connect window, hit enter here ...
line >/dev/null
echo Announcing presence
presence -d $SJ_DIR
$te -T 'buddies - '$jid -e watch -d sjfs-online-buddies -d $SJ_DIR &
bg_jobs=($bg_jobs $apid)
$te -T 'monitor-all - '$jid -e sjfs-monitor-all-chats -d $SJ_DIR -u $SJ_USER -s $SJ_SERVER &
bg_jobs=($bg_jobs $apid)

# prepare for runit
echo '#!/usr/bin/env rc
'$te' -T `{basename `{pwd}} -e sjfs-chat -c -u '$SJ_USER' -s '$SJ_SERVER > run
chmod u+x run

outs1=`{find . -name out | sort}
for (o in $outs1) {
	dir=`{dirname $o}
	touch $dir/down
	test -e $dir/run || ln -s ../run $dir
	runsv $dir &
	bg_jobs=($bg_jobs $apid)
	tail -f -n0 $o | while (line) {
		sv once $dir
	} &
	bg_jobs=($bg_jobs $apid)
}

echo Hit enter to end all
line
#for (job in $bg_jobs) {/bin/kill -$job; }
kill -$bg_jobs
exit 0

while true; do
	#sleep 5
	# The only purpose of entr here is to wait for a change in the current
	# directory; the first true is because entr needs a utility; the second
	# true is to prevent an error in the script since entr will return 2
	echo . | entr -pd true || true
	outs2=`find . -name out | sort`
	if [ "$outs1" != "$outs2" ] ; then
		new_outs=`comm -13 <(echo "$outs1") <(echo "$outs2")`  # <() requires ksh93
		for o in $new_outs; do
			dir=$(dirname "$o")
			touch "$dir"/down
			[ -e "$dir"/run ] || ln -s ../run "$dir"
			runsv "$dir" &
			bg_jobs=($bg_jobs $apid)
			tail -f -n0 "$o" | while IFS= read -r line; do
				sv once "$dir"
			done &
		bg_jobs=($bg_jobs $apid)
		done
		outs1="$outs2"
	fi
done

exit 0
