#!/usr/bin/env lua
require('strict')
local P = require('posix')
local C = require('curses')

local s_lines, s_cols  -- size of the total screen
local top_win, bottom_win
local input_lines = 3  -- size of the input window

tail_out = assert(io.popen('tail -f -n0 out', 'r'))
assert(tail_out:setvbuf('no'))
tail_out_fd = P.fileno(tail_out)

stdin_fd = P.fileno(io.stdin)

fds = {
	[tail_out_fd] = { events = {IN=true} },
	[stdin_fd] = { events = {IN=true} }
}

in_fifo = io.open('in', 'a')
assert(in_fifo:setvbuf('no'))

C.initscr()
C.cbreak(true)
C.echo(true)
local stdscr = C.stdscr()

stdscr:scrollok(true)
stdscr:keypad(true)
stdscr:clear()
stdscr:refresh()

s_lines, s_cols = stdscr:getmaxyx()
top_win = C.newwin(input_lines,  s_cols, 0,             0)
bottom_win = C.newwin(s_lines-input_lines, s_cols, input_lines, 0)

top_lines, top_cols = top_win:getmaxyx()
--top_win:addstr('lines='..top_lines..'\n')
--top_win:addstr('cols='..top_cols..'\n')
--top_win:border()
top_win:refresh()

bottom_lines, bottom_cols = bottom_win:getmaxyx()
--bottom_win:addstr('lines='..bottom_lines..'\n')
--bottom_win:addstr('cols='..bottom_cols..'\n')
--bottom_win:border()
bottom_win:refresh()

line = ''
while true do
	r = P.poll(fds, -1)
	if r == 0 then  -- timeout
		break
	elseif r == 1 then
		if  fds[tail_out_fd].revents.IN then
			bottom_win:addstr(tail_out:read('*l') .. '\n')
			bottom_win:refresh()
			-- C.beep()
		elseif  fds[stdin_fd].revents.IN then
			c = stdscr:getch()
			if c < 256 then
				c = string.char(c)
			else
				c = ''
				--top_win:addstr('What kind of character is this?')
				--top_win:refresh()
			end
			if c == '\n' then
				if line == 'q' then
					break
				end
				in_fifo:write(line)
				line = ''
				top_win:clear()
				top_win:refresh()
			else
				line = line .. c
			end
		else
			top_win:addstr('What kind of event is this?')
		end
	else
		print "finish!"
		break
	end
end

in_fifo:flush()
in_fifo:close()
--tail_out:flush()  -- makes the program freeze
--tail_out:close()  -- makes the program freeze
C.endwin()

os.exit(true)
