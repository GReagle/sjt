#!/usr/bin/env rc
flag e +
~ $DEBUG ?* && flag x +

usage='usage: ' ^ `{basename $0} ^ ' [-d <directory>]
Environment variables:  SJ_DIR, SJ_SERVER, SJ_USER, note_time'

state=''
for (arg) {
	if(~ $state ?*) {
		switch($state) {
		case -d; SJ_DIR=$arg
		case -s; SJ_SERVER=$arg
		case -u; SJ_USER=$arg
		}
		state=''
	}
	if not {
		switch($arg) {
		case -[dsu]; state=$arg
		case *
			printf '%s: invalid option: %s\n%s\n' `{basename $0} $arg $usage
			exit 1
		}
	}
}

~ $SJ_DIR ?* || { echo Directory is needed via -d or SJ_DIR; exit 1; }
cd $SJ_DIR || { echo cannot cd to $SJ_DIR; exit 1; }

bg_jobs=()
outs1=`{find . -name out | sort}
if (~ $outs1 ?*) {
	for (o in $outs1) {
		sjfs-monitor-outfile $o &
		bg_jobs=($bg_jobs $apid)
	}
}

fn sigint  { for (job in $bg_jobs) kill -TERM -$job; exit 1 }
fn sigquit { for (job in $bg_jobs) kill -TERM -$job; exit 2 }
fn sighup  { for (job in $bg_jobs) kill -TERM -$job; exit 3 }
fn sigterm { for (job in $bg_jobs) kill -TERM -$job; exit 4 }
fn sigexit { for (job in $bg_jobs) kill -TERM -$job; exit 5 }

while (true) {
	# entr waits for a change in directories within $SJ_DIR.
	# 1st true is because entr needs a utility.
	# 2nd true prevents an error in this script since entr returns 2.
	find . -type d | entr -pd true || true
	outs2=`{find . -name out | sort}
	if ( ! ~ $"outs1 $"outs2 ) {
		new_outs=`{comm -13 <{for (s in $outs1) echo $s} <{for (s in $outs2) echo $s} }
		for (o in $new_outs) {
			notice='new chat from ' ^ `{basename `{dirname $o}}
			printf $notice ^ '\a\n'
			~ $note_time ?* && notify-send -t $note_time sjfs-monitor $notice
			cat $o
			sjfs-monitor-outfile $o &
			bg_jobs=($bg_jobs $apid)
		}
		outs1=$outs2
	}
}
