#!/bin/ksh93
[ "$DEBUG" ] && set -x

# Set configuration variable to "no" to disable feature
#
# number of milliseconds for the notify-send timeout
: "${note_time:=4000}"

while [ "$1" ]; do
	case "$1" in
		-d) SJ_DIR="$2"; shift;;
		*)  printf "$(basename $0): invalid option $1\n"; exit 1;;
	esac
	shift
done

[ "$SJ_DIR" ] || { echo SJ_DIR is not defined; exit 1; }
cd "$SJ_DIR" || { echo cannot cd to "$SJ_DIR"; exit 1; }

trap "kill 0; exit" HUP INT QUIT TERM EXIT  # kill all background jobs

outs1=`find . -name out | sort`
if [ "$outs1" ]; then
	for o in $outs1; do
		tail -f -n0 $o | while IFS= read -r line; do
			printf '%s\n' "$line"
			if echo "$line" | egrep -q "^[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2} [[:digit:]]{2}:[[:digit:]]{2} <${SJ_USER}@${SJ_SERVER}"; then
				:  # this is a message that I sent myself, so don't notify
			else
				printf '\a'
				dir=$(basename $(dirname "$o"))
				message="$(echo "$line" | cut -d\> -f2-)"
				[ "$note_time" != no ] && notify-send -t "$note_time" "sjfs-monitor: $dir" "$message"
			fi
		done &
	done
fi

while true; do
	outs2=`find . -name out | sort`
	if [ "$outs1" != "$outs2" ] ; then
		new_outs=`comm -13 <(echo "$outs1") <(echo "$outs2")`  # <() requires ksh93
		for o in $new_outs; do
			notice="new chat from $(basename $(dirname $o))"
			printf "$notice\a\n"
			[ "$note_time" != no ] && notify-send -t "$note_time" "sjfs-monitor" "$notice"
			tail -f -n+0 $o | while IFS= read -r line; do
				printf '%s\n' "$line"
				if echo "$line" | egrep -q "^[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2} [[:digit:]]{2}:[[:digit:]]{2} <${SJ_USER}@${SJ_SERVER}"; then
					:  # this is a message that I sent myself, so don't notify
				else
					printf '\a'
					dir=$(basename $(dirname "$o"))
					message="$(echo "$line" | cut -d\> -f2-)"
					[ "$note_time" != no ] && notify-send -t "$note_time" "sjfs-monitor: $dir" "$message"			
				fi
			done &
		done
		outs1="$outs2"
	fi
	sleep 5
done
kill 0
